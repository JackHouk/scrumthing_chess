@model Chess.ViewModels.IndexViewModel

<div class="row">
    <div class="col-lg-8 col-lg-offset-1">
        <canvas id="canvas" style="width:100%;background:blue;"></canvas>
    </div>
    <div class="col-lg-2">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h2 class="panel-title">Chat</h2>
            </div>
            <div class="panel-body">
                <div id="chatMessages" style="height:500px;overflow-y:auto;">
                    <div class="media">
                        <div class="media-body">
                            <h4 class="media-heading">Matt</h4>
                            My name is Matt.
                        </div>
                    </div>
                </div>
                <input type="hidden" value="@Model.Username" id="username" />
                <input type="hidden" value="white" id="team" />
                <div class="input-group">
                    <input type="text" class="form-control" id="message" placeholder="Say something..." />
                    <span class="input-group-btn">
                        <button class="btn btn-primary" id="sendChat"><span class="glyphicon glyphicon-send"></span></button>
                    </span>

                </div>
                <label>You are chatting as @Model.Username</label>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="signalr/hubs"></script>
    <script>

        $(function () {
            // Declare a proxy to reference the hub. 
            var chat = $.connection.chatHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.broadcastMessage = function (name, message, team) {
                // Add the message to the page. 
                $('#chatMessages').append('<div class="media"><div class="media-body"><h4 class="media-heading">' + name
                    + '</h4>' + message + '</div></div>');
            };

            // Set initial focus to message input box.  
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendChat').click(function () {
                    // Call the Send method on the hub. 
                    chat.server.send($('#username').val(), $('#message').val(), $("#team").val());
                    // Clear text box and reset focus for next comment. 
                    $('#message').val('').focus();
                });

                $("#message").keypress(function (e) {
                    if(e.which == 13)
                    {
                        $("#sendChat").click();
                    }
                })
            });
			
			// Create a new game.
            var game = new Game();

			// Draw the game to the canvas.
            canvas = document.getElementById("canvas");
            context = canvas.getContext("2d");
            game.draw(context);
        });

        function Sprite(image, sourceX, sourceY, sourceWidth, sourceHeight)
		{
        	this.image = image;
        	this.sourceX = sourceX;
        	this.sourceY = sourceY;
        	this.sourceWidth = sourceWidth;
        	this.sourceHeight = sourceHeight;
        }

        function ChessPieceType(name, sprite) {
            this.name = name;
            this.sprite = sprite;
        }

        function ChessPiece(pieceType, x, y)
		{
			this.pieceType = pieceType;
			this.x = x;
			this.y = y;
		}

        function ChessBoard()
		{
        	this.width = 8;
        	this.height = 8;

			// Create an empty grid.
        	this.grid = new Array(this.width);
        	for (var x = 0; x < this.width; x += 1)
        	{
        		this.grid[x] = Array(this.height);
        		for (var y = 0; y < this.height; y += 1)
        		{
					this.grid[x][y] = null;
        		}
        	}

        	this.placeNewPiece = function (pieceType, x, y) 
        	{
        	    this.grid[x][y] = new ChessPiece(pieceType, x, y);
        	}

            this.setupBoard = function ()
            {
                // Load piece sprites.
                var s = 60;
                var image = null;
	            //var image = new Image();
	            //image.src = "ChessPieces.png";

                // Create piece types.
        	    var queen = ChessPieceType("Queen",   Sprite(image, 0 * s, 0 * s, s, s));
        	    var king  = ChessPieceType("King",    Sprite(image, 1 * s, 0 * s, s, s));
        	    var rook   = ChessPieceType("Rook",   Sprite(image, 2 * s, 0 * s, s, s));
        	    var knight = ChessPieceType("Knight", Sprite(image, 3 * s, 0 * s, s, s));
        	    var bishop = ChessPieceType("Bishop", Sprite(image, 4 * s, 0 * s, s, s));
        	    var pawn   = ChessPieceType("Pawn",   Sprite(image, 5 * s, 0 * s, s, s));

                // Place pieces onto the board for player 1.
        	    this.placeNewPiece(rook,   0, 0)
        	    this.placeNewPiece(knight, 1, 0)
        	    this.placeNewPiece(bishop, 2, 0)
        	    this.placeNewPiece(queen,  3, 0)
        	    this.placeNewPiece(king,   4, 0)
        	    this.placeNewPiece(bishop, 5, 0)
        	    this.placeNewPiece(knight, 6, 0)
        	    this.placeNewPiece(rook,   7, 0)
        	    this.placeNewPiece(pawn,   0, 1)
        	    this.placeNewPiece(pawn,   1, 1)
        	    this.placeNewPiece(pawn,   2, 1)
        	    this.placeNewPiece(pawn,   3, 1)
        	    this.placeNewPiece(pawn,   4, 1)
        	    this.placeNewPiece(pawn,   5, 1)
        	    this.placeNewPiece(pawn,   6, 1)
        	    this.placeNewPiece(pawn,   7, 1)
            }
        }

        function Game() {
			
			this.board = new ChessBoard();
            this.board.setupBoard();

			// Draw the game to the canvas.
        	this.draw = function (context) {

				//var spr = Sprite(image, 0, 0, 60, 60);

				squareSize = 10;

                // Draw each grid square.
				for (var x = 0; x < this.board.width; x += 1)
        		{
        			for (var y = 0; y < this.board.height; y += 1)
        			{
						// Draw the grid square.
						var isBlack = (y % 2 == 0 ? x % 2 == 0 : x % 2 == 1);
						if (isBlack)
							context.fillStyle = "black"
						else
							context.fillStyle = "white"
        				context.fillRect(x * squareSize, y * squareSize,
							squareSize, squareSize);
						
						var piece = this.board.grid[x][y];

						// Draw a chess piece that might be on this square.
						if (piece != null)
						{
							context.fillStyle = "yellow"
        					context.fillRect(x * squareSize, y * squareSize,
								squareSize, squareSize);
						}
        			}
        		}
        	}
        }


    </script>
}