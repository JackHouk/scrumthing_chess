@model Chess.ViewModels.IndexViewModel

<div class="row">
    <div class="col-lg-8 col-lg-offset-1">
        <canvas id="canvas" style="width:100%;height:600px;background:blue;"></canvas>
    </div>
    <div class="col-lg-2">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h2 class="panel-title">Chat</h2>
            </div>
            <div class="panel-body">
                <div id="chatMessages" style="height:500px;overflow-y:auto;">
                    <div class="media">
                        <div class="media-body">
                            <h4 class="media-heading">Matt</h4>
                            My name is Matt.
                        </div>
                    </div>
                </div>
                <input type="hidden" value="@Model.Username" id="username" />
                <input type="hidden" value="white" id="team" />
                <div class="input-group">
                    <input type="text" class="form-control" id="message" placeholder="Say something..." />
                    <span class="input-group-btn">
                        <button class="btn btn-primary" id="sendChat"><span class="glyphicon glyphicon-send"></span></button>
                    </span>

                </div>
                <label>You are chatting as @Model.Username</label>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="signalr/hubs"></script>
    <script>
        
        var game = new Game();
        var canvas = null;


        $(function () {
            // Declare a proxy to reference the hub. 
            var chat = $.connection.chatHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.broadcastMessage = function (name, message, team) {
                // Add the message to the page. 
                $('#chatMessages').append('<div class="media"><div class="media-body"><h4 class="media-heading">' + name
                    + '</h4>' + message + '</div></div>');
            };

            // Set initial focus to message input box.  
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendChat').click(function () {
                    // Call the Send method on the hub. 
                    chat.server.send($('#username').val(), $('#message').val(), $("#team").val());
                    // Clear text box and reset focus for next comment. 
                    $('#message').val('').focus();
                });

                $("#message").keypress(function (e) {
                    if(e.which == 13)
                    {
                        $("#sendChat").click();
                    }
                })
            });
			
			// Create a new game.
            //var game = new Game();
            
            canvas = document.getElementById("canvas");
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            context = canvas.getContext("2d");

            // Initialize the game.
            console.log("Initializing game");
            game.initialize(canvas);
            
            // Setup up input events.
            canvas.onmousemove = function (event) {
                game.onMouseMove(event);
            };
            canvas.onmousedown = function (event) {
                game.onMouseDown(event);
            };
            canvas.onmouseup = function (event) {
                game.onMouseUp(event);
            };

            // Run the game.
            var fps = 60;
            var frameTime = 1 / fps;
            setInterval(function() {
                game.update();
                game.draw(context);
            }, frameTime);
        });

        function Sprite(image, sourceX, sourceY, sourceWidth, sourceHeight)
		{
        	this.image = image;
        	this.sourceX = sourceX;
        	this.sourceY = sourceY;
        	this.sourceWidth = sourceWidth;
        	this.sourceHeight = sourceHeight;
        }

        function ChessPieceType(name, sprite) {
            this.name = name;
            this.sprite = sprite;
        }

        function ChessPiece(pieceType, x, y)
		{
			this.pieceType = pieceType;
			this.x = x;
			this.y = y;
		}

        function BoardSquare(x, y)
        {
			this.x = x;
			this.y = y;
            this.piece = null;
        }

        function ChessBoard()
		{
        	this.width = 8;
        	this.height = 8;

			// Create an empty grid.
        	this.grid = new Array(this.width);
        	for (var x = 0; x < this.width; x += 1)
        	{
        		this.grid[x] = Array(this.height);
        		for (var y = 0; y < this.height; y += 1)
        		{
					this.grid[x][y] = new BoardSquare(x, y);
        		}
        	}

            this.getSquare = function (x, y)
            {
                if (x < 0 || y < 0 || x >= this.width || y >= this.height)
                    return null;
                return this.grid[x][y];
            }

        	this.placeNewPiece = function (pieceType, x, y) 
        	{
        	    this.grid[x][y].piece = new ChessPiece(pieceType, x, y);
        	}

            this.setupBoard = function ()
            {
                // Load piece sprites.
                var s = 60;
	            this.image = new Image();
	            this.image.src = "ChessPieces.png";

                // Create piece types.
        	    this.queen  = new ChessPieceType("Queen",  new Sprite(this.image, 0 * s, 0 * s, s, s));
        	    this.king   = new ChessPieceType("King",   new Sprite(this.image, 1 * s, 0 * s, s, s));
        	    this.rook   = new ChessPieceType("Rook",   new Sprite(this.image, 2 * s, 0 * s, s, s));
        	    this.knight = new ChessPieceType("Knight", new Sprite(this.image, 3 * s, 0 * s, s, s));
        	    this.bishop = new ChessPieceType("Bishop", new Sprite(this.image, 4 * s, 0 * s, s, s));
        	    this.pawn   = new ChessPieceType("Pawn",   new Sprite(this.image, 5 * s, 0 * s, s, s));

                // Place pieces onto the board for player 1.
        	    this.placeNewPiece(this.rook,   0, 0);
        	    this.placeNewPiece(this.knight, 1, 0);
        	    this.placeNewPiece(this.bishop, 2, 0);
        	    this.placeNewPiece(this.queen,  3, 0);
        	    this.placeNewPiece(this.king,   4, 0);
        	    this.placeNewPiece(this.bishop, 5, 0);
        	    this.placeNewPiece(this.knight, 6, 0);
        	    this.placeNewPiece(this.rook,   7, 0);
        	    this.placeNewPiece(this.pawn,   0, 1);
        	    this.placeNewPiece(this.pawn,   1, 1);
        	    this.placeNewPiece(this.pawn,   2, 1);
        	    this.placeNewPiece(this.pawn,   3, 1);
        	    this.placeNewPiece(this.pawn,   4, 1);
        	    this.placeNewPiece(this.pawn,   5, 1);
        	    this.placeNewPiece(this.pawn,   6, 1);
        	    this.placeNewPiece(this.pawn,   7, 1);

                // Place pieces onto the board for player 2.
        	    this.placeNewPiece(this.rook,   0, 7);
        	    this.placeNewPiece(this.knight, 1, 7);
        	    this.placeNewPiece(this.bishop, 2, 7);
        	    this.placeNewPiece(this.king,   4, 7);
        	    this.placeNewPiece(this.queen,  3, 7);
        	    this.placeNewPiece(this.bishop, 5, 7);
        	    this.placeNewPiece(this.knight, 6, 7);
        	    this.placeNewPiece(this.rook,   7, 7);
        	    this.placeNewPiece(this.pawn,   0, 6);
        	    this.placeNewPiece(this.pawn,   1, 6);
        	    this.placeNewPiece(this.pawn,   2, 6);
        	    this.placeNewPiece(this.pawn,   3, 6);
        	    this.placeNewPiece(this.pawn,   4, 6);
        	    this.placeNewPiece(this.pawn,   5, 6);
        	    this.placeNewPiece(this.pawn,   6, 6);
        	    this.placeNewPiece(this.pawn,   7, 6);
            }
        }

        function Game()
        {
			
            // Initialize a new game.
            this.initialize = function (canvas) 
            {
                this.canvas = canvas;
                
                this.board = new ChessBoard();
                this.board.setupBoard();

                this.squareSize = 64;
            }

            // Called when a mouse button presses on the canvas.
            this.onMouseDown = function (event)
            {
                // Get the square location that was clicked on.
                var clientRect = canvas.getBoundingClientRect();
                var mouseX = Math.floor(event.clientX - clientRect.left);
                var mouseY = Math.floor(event.clientY - clientRect.top);
                var squareX = Math.floor(mouseX / this.squareSize);
                var squareY = Math.floor(mouseY / this.squareSize);

                console.log("mouse: (" + mouseX + ", " + mouseY + ")");
                console.log("square: (" + squareX + ", " + squareY + ")");

                // Check if there is a piece in this square.
                var square = game.board.getSquare(squareX, squareY);
                if (square != null)
                {
                    if (square.piece != null)
                        console.log("clicked on a " + square.piece.pieceType.name + "!");
                    else
                        console.log("clicked on an empty square!");
                }
            }

            // Called when a mouse button releases on the canvas.
            this.onMouseUp = function (event)
            {
                console.log("mouse releasedd")
            }

            // Called when the mouse is moved over the canvas.
            this.onMouseMove = function (event)
            {
                // Get the square location that the mouse is hovering over.
                var clientRect = canvas.getBoundingClientRect();
                var mouseX = Math.floor(event.clientX - clientRect.left);
                var mouseY = Math.floor(event.clientY - clientRect.top);
                var squareX = Math.floor(mouseX / this.squareSize);
                var squareY = Math.floor(mouseY / this.squareSize);
            }

            // Update the game for a single frame.
            this.update = function ()
            {

            }

            // Draw the game to the canvas.
            this.draw = function (context)
            {
                this.squareSize = Math.floor(context.canvas.height / this.board.height);

                // Draw each grid square.
				for (var x = 0; x < this.board.width; x += 1)
        		{
        			for (var y = 0; y < this.board.height; y += 1)
        			{
						// Draw the grid square.
						var isBlack = (y % 2 == 0 ? x % 2 == 0 : x % 2 == 1);
						if (isBlack)
							context.fillStyle = "gray";
						else
							context.fillStyle = "white";
        				context.fillRect(x * this.squareSize, y * this.squareSize,
							this.squareSize, this.squareSize);
						
						var piece = this.board.grid[x][y].piece;

						// Draw a chess piece that might be on this square.
						if (piece != null)
						{
                            var spr = piece.pieceType.sprite;
                            
                            if (spr != null && spr.image != null)
                            {
				                context.drawImage(spr.image, spr.sourceX, spr.sourceY,
						            spr.sourceWidth, spr.sourceHeight,
						            x * this.squareSize, y * this.squareSize,
                                    this.squareSize, this.squareSize);
                            }
                            else
                            {
							    context.fillStyle = "yellow";
        					    context.fillRect(x * this.squareSize, y * this.squareSize,
								    this.squareSize, this.squareSize);
                            }
						}
        			}
        		}
        	}
        }
        $("canvas").click(function (event) {
            x = event.pageX - document.getElementById("canvas").offsetLeft;
            y = event.pageX - document.getElementById("canvas").offsetTop;
            console.log(x);
            console.log(y);
        })
    </script>
}